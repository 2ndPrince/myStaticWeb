#include <iostream>
#include <algorithm>
#include <vector>
#include <queue>

using namespace std;
vector<int> a[1001];
bool c[1001];
void dfs(int x){
		if(c[x]) return;
		cout << x << ' ';
		c[x] = true;
		for (int i=0; i<a[x].size(); i++){
			int y = a[x][i];
			dfs(y);
		}
}


void bfs(int start){
	queue<int> q;
	q.push(start);
	c[start] = true;
	while(!q.empty()){
		int x = q.front();
		q.pop();
		cout << x << ' ';
		for (int i=0; i<a[x].size(); i++){
			int y = a[x][i];
			if (c[y] ==false){
				q.push(y);
				c[y]= true;
			}
		}
	}
}




int main(){
	int n,m,start;
	cin >> n >> m >> start;
	while(m--){
		int x,y;
		cin >> x >> y;
		a[x].push_back(y);
		a[y].push_back(x);		
	}
	for (int i=1; i<=n; i++){
		sort(a[i].begin(),a[i].end());
	}
	dfs(start);
	cout << '\n';
	for (int i=1; i<=n; i++) c[i] = false;
	bfs(start);
	cout << '\n';
	return 0
}